{"version":3,"sources":["App.js","index.js"],"names":["operations","App","useState","numRows","setNumRows","numCols","setNumCols","generateEmptyGrid","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","style","backgroundColor","onClick","Math","random","onSubmit","e","preventDefault","Number","target","value","undefined","type","placeholder","name","display","gridTemplateColumns","gridTemplateRows","map","col","newGrid","cursor","width","height","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5692372f.chunk.js","sourcesContent":["import { useState, useCallback, useRef } from 'react';\r\nimport produce from 'immer'\r\nimport './App.css';\r\n\r\n\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0]\r\n]\r\n\r\n\r\n\r\nfunction App() {\r\n  const [numRows, setNumRows] = useState(50);\r\n  const [numCols, setNumCols] = useState(50);\r\n\r\n  const generateEmptyGrid = ((numRows, numCols) => {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0))\r\n    }\r\n    return rows;\r\n  })\r\n\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateEmptyGrid(numRows,numCols)\r\n  })\r\n\r\n  const [running, setRunning] = useState(false)\r\n\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running;\r\n\r\n   const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n\r\n    setGrid(g => {\r\n      return produce(g, gridCopy => {\r\n        for (let i = 0; i < numRows; i++) {\r\n          for (let k = 0; k < numCols; k++) {\r\n            let neighbors = 0;\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newK = k + y;\r\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\r\n                neighbors += g[newI][newK];\r\n              }\r\n            });\r\n\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][k] = 0;\r\n            } else if (g[i][k] === 0 && neighbors === 3) {\r\n              gridCopy[i][k] = 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    setTimeout(runSimulation, 100);\r\n  }, [numRows, numCols]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const numCols = Number(e.target[0].value);\r\n    const numRows = Number(e.target[1].value);\r\n\r\n    if((Number(e.target[0].value) === undefined || 0 ) || \r\n      (Number(e.target[1].value) === undefined || 0 ))       \r\n      return;\r\n    else {\r\n      setRunning(false);\r\n      runningRef.current = false;     \r\n      setNumCols(numCols)\r\n      setNumRows(numRows)\r\n      setGrid(generateEmptyGrid(numRows,numCols));      \r\n    }    \r\n  }\r\n\r\n  return (\r\n    <div className='app' style={{ backgroundColor: '#111'}}>\r\n      <nav className='nav' >\r\n        <div className='game-buttons'>\r\n          <button \r\n            onClick={() => {\r\n              setRunning(!running);\r\n              if(!running) {\r\n                runningRef.current = true;\r\n                runSimulation();\r\n              }\r\n            \r\n            }}>\r\n              {running ? 'Stop' : 'Start' }\r\n          </button>\r\n          <button onClick={() => {\r\n            setGrid(generateEmptyGrid())\r\n          }}>\r\n            Clear\r\n          </button>\r\n          <button onClick={() => {\r\n            const rows = [];\r\n            for (let i = 0; i < numRows; i++) {\r\n              rows.push(Array.from(Array(numCols), () => (Math.random() > 0.5 ? 1 : 0)))\r\n            }\r\n        \r\n            setGrid(rows);\r\n          }}>\r\n            Random\r\n          </button>\r\n        </div>\r\n\r\n        <div className='spacer'></div>\r\n          \r\n        <form className='form' onSubmit={handleSubmit}>\r\n          <input type='number' placeholder='Columns' name='cols' />\r\n          <input type='number' placeholder='Rows' name='rows' />\r\n          <button>Resize Grid</button>\r\n        </form>\r\n       \r\n      </nav>\r\n     \r\n      <div className='grid'\r\n        style={{\r\n        display:'grid',        \r\n        gridTemplateColumns: `repeat(${numCols}, 20px)`,\r\n        gridTemplateRows: `repeat(${numRows}, 20px)`\r\n      }}>\r\n        {grid.map((rows, i) => \r\n          rows.map((col, k) => \r\n          <div\r\n            onClick={() => {\r\n              const newGrid = produce(grid, gridCopy => {\r\n                gridCopy[i][k] = gridCopy[i][k] ? 0: 1;\r\n              })\r\n              setGrid(newGrid)\r\n            }}\r\n            key={`${i}-${k}`} \r\n            style={{ \r\n            cursor:'pointer',\r\n            width: 20, \r\n            height: 20, \r\n            backgroundColor: grid[i][k] ? 'limegreen' : 'black',\r\n            border: 'solid 1px #999'\r\n            }}\r\n          />\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}