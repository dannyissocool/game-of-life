{"version":3,"sources":["App.js","index.js"],"names":["operations","App","useState","numRows","setNumRows","numCols","setNumCols","openInstructions","setOpenInstructions","openLogic","setOpenLogic","generateEmptyGrid","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","style","backgroundColor","onClick","Math","random","onSubmit","e","preventDefault","Number","target","value","reset","type","placeholder","name","display","gridTemplateColumns","gridTemplateRows","map","col","newGrid","cursor","width","height","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAIMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAyNQC,MAtNf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAAgDJ,oBAAS,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EAAoB,SAACR,EAASE,GAElC,IADA,IAAMO,EAAO,GACJC,EAAI,EAAGA,EAAIV,EAASU,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAAMV,IAAU,kBAAM,MAE7C,OAAOO,GAGT,EAAwBV,oBAAS,WAC/B,OAAOS,EAAkBR,EAASE,MADpC,mBAAOY,EAAP,KAAaC,EAAb,KAIA,EAA8BhB,oBAAS,GAAvC,mBAAOiB,EAAP,KAAgBC,EAAhB,KAEMC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAIhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBf,GACP,IAF4B,eAEnBgB,GACP,IAAIC,EAAY,EAChB9B,EAAW+B,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOrB,EAAImB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EAAO/B,GAAWgC,GAAQ,GAAKA,EAAO9B,IACrDyB,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASf,GAAGgB,GAAK,EACI,IAAZH,EAAEb,GAAGgB,IAA0B,IAAdC,IAC1BF,EAASf,GAAGgB,GAAK,IAbZA,EAAI,EAAGA,EAAIxB,EAASwB,IAAM,EAA1BA,IADFhB,EAAI,EAAGA,EAAIV,EAASU,IAAM,EAA1BA,SAqBbuB,WAAWZ,EAAe,QACzB,CAACrB,EAASE,IAyBb,OACE,sBAAKgC,UAAU,MAAMC,MAAO,CAAEC,gBAAiB,QAA/C,UACE,uDAEA,qBAAKF,UAAU,cAAf,SACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,eAAf,UACE,wBACEG,QAAS,WAEP,IADA,IAAM5B,EAAO,GACJC,EAAI,EAAGA,EAAIV,EAASU,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MAAMV,IAAU,kBACzBoC,KAAKC,SAAW,GAAM,EAAI,MAKhCxB,EAAQN,IAXZ,uBAiBA,wBACE4B,QAAS,WACPpB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MALN,SASGL,EAAU,OAAS,UAGtB,wBACEqB,QAAS,WACPtB,EAAQP,EAAkBR,EAASE,KAFvC,sBASF,qBAAKgC,UAAU,WAEf,uBAAMA,UAAU,OAAOM,SAtEV,SAACC,GACpBA,EAAEC,iBAEF,IAAMxC,EAAUyC,OAAOF,EAAEG,OAAO,GAAGC,OAC7B7C,EAAU2C,OAAOF,EAAEG,OAAO,GAAGC,OAED,IAA9BF,OAAOF,EAAEG,OAAO,GAAGC,QAA8C,IAA9BF,OAAOF,EAAEG,OAAO,GAAGC,QACxD5B,GAAW,GACXC,EAAWE,SAAU,EACrBjB,EAAW,IACXF,EAAW,IACXc,EAAQP,EAAkB,GAAI,KAC9BiC,EAAEG,OAAOE,UAET7B,GAAW,GACXC,EAAWE,SAAU,EACrBjB,EAAWD,GACXD,EAAWD,GACXe,EAAQP,EAAkBR,EAASE,IACnCuC,EAAEG,OAAOE,UAmDL,UACE,uBAAOC,KAAK,SAASC,YAAY,eAAeC,KAAK,SACrD,uBAAOF,KAAK,SAASC,YAAY,YAAYC,KAAK,SAClD,yDAKN,sBAAKf,UAAU,kBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,wBAAQG,QAAS,kBAAMhC,GAAqBD,IAA5C,0BAICA,GACC,+BACE,4CACY,6CADZ,2BAGA,+BACE,yCADF,oBACqC,wCADrC,gBAGA,+BACE,yCADF,4BAGA,mEAKN,sBAAK8B,UAAU,aAAf,UACE,wBAAQG,QAAS,kBAAM9B,GAAcD,IAArC,wBAECA,GACC,+BACE,mHAIA,kHAIA,mHAIA,uIASR,qBACE4B,UAAU,OACVC,MAAO,CACLe,QAAS,OACTC,oBAAoB,UAAD,OAAYjD,EAAZ,WACnBkD,iBAAiB,UAAD,OAAYpD,EAAZ,YALpB,SAQGc,EAAKuC,KAAI,SAAC5C,EAAMC,GAAP,OACRD,EAAK4C,KAAI,SAACC,EAAK5B,GAAN,OACP,qBACEW,QAAS,WACP,IAAMkB,EAAU/B,YAAQV,GAAM,SAACW,GAC7BA,EAASf,GAAGgB,GAAKD,EAASf,GAAGgB,GAAK,EAAI,KAExCX,EAAQwC,IAGVpB,MAAO,CACLqB,OAAQ,UACRC,MAAO,GACPC,OAAQ,GACRtB,gBAAiBtB,EAAKJ,GAAGgB,GAAK,YAAc,QAC5CiC,OAAQ,mBAbZ,UAOUjD,EAPV,YAOegB,gBC/M3BkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e47f5741.chunk.js","sourcesContent":["import { useState, useCallback, useRef } from \"react\";\r\nimport produce from \"immer\";\r\nimport \"./App.css\";\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0],\r\n];\r\n\r\nfunction App() {\r\n  const [numRows, setNumRows] = useState(50);\r\n  const [numCols, setNumCols] = useState(50);\r\n\r\n  const [openInstructions, setOpenInstructions] = useState(false);\r\n  const [openLogic, setOpenLogic] = useState(false);\r\n\r\n  const generateEmptyGrid = (numRows, numCols) => {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0));\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateEmptyGrid(numRows, numCols);\r\n  });\r\n\r\n  const [running, setRunning] = useState(false);\r\n\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running;\r\n\r\n  const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n\r\n    setGrid((g) => {\r\n      return produce(g, (gridCopy) => {\r\n        for (let i = 0; i < numRows; i++) {\r\n          for (let k = 0; k < numCols; k++) {\r\n            let neighbors = 0;\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newK = k + y;\r\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\r\n                neighbors += g[newI][newK];\r\n              }\r\n            });\r\n\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][k] = 0;\r\n            } else if (g[i][k] === 0 && neighbors === 3) {\r\n              gridCopy[i][k] = 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    setTimeout(runSimulation, 100);\r\n  }, [numRows, numCols]);\r\n\r\n  const handleResize = (e) => {\r\n    e.preventDefault();\r\n\r\n    const numCols = Number(e.target[0].value);\r\n    const numRows = Number(e.target[1].value);\r\n\r\n    if (Number(e.target[0].value) === 0 || Number(e.target[1].value) === 0) {\r\n      setRunning(false);\r\n      runningRef.current = false;\r\n      setNumCols(10);\r\n      setNumRows(10);\r\n      setGrid(generateEmptyGrid(10, 10));\r\n      e.target.reset();\r\n    } else {\r\n      setRunning(false);\r\n      runningRef.current = false;\r\n      setNumCols(numCols);\r\n      setNumRows(numRows);\r\n      setGrid(generateEmptyGrid(numRows, numCols));\r\n      e.target.reset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\" style={{ backgroundColor: \"#111\" }}>\r\n      <h4>Conway's Game of Life</h4>\r\n\r\n      <div className=\"nav-wrapper\">\r\n        <nav className=\"nav\">\r\n          <div className=\"game-buttons\">\r\n            <button\r\n              onClick={() => {\r\n                const rows = [];\r\n                for (let i = 0; i < numRows; i++) {\r\n                  rows.push(\r\n                    Array.from(Array(numCols), () =>\r\n                      Math.random() > 0.5 ? 1 : 0\r\n                    )\r\n                  );\r\n                }\r\n\r\n                setGrid(rows);\r\n              }}\r\n            >\r\n              Randomize\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => {\r\n                setRunning(!running);\r\n                if (!running) {\r\n                  runningRef.current = true;\r\n                  runSimulation();\r\n                }\r\n              }}\r\n            >\r\n              {running ? \"Stop\" : \"Start\"}\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => {\r\n                setGrid(generateEmptyGrid(numRows, numCols));\r\n              }}\r\n            >\r\n              Clear\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"spacer\"></div>\r\n\r\n          <form className=\"form\" onSubmit={handleResize}>\r\n            <input type=\"number\" placeholder=\"# of Columns\" name=\"cols\" />\r\n            <input type=\"number\" placeholder=\"# of Rows\" name=\"rows\" />\r\n            <button>Resize Grid</button>\r\n          </form>\r\n        </nav>\r\n      </div>\r\n\r\n      <div className=\"game-rules-grid\">\r\n        <div className=\"game-instructions\">\r\n          <button onClick={() => setOpenInstructions(!openInstructions)}>\r\n            Instructions\r\n          </button>\r\n\r\n          {openInstructions && (\r\n            <ul>\r\n              <li>\r\n                Click the <span>Randomize</span> button to fill grid.\r\n              </li>\r\n              <li>\r\n                <span>Start</span> the simulation. <span>Stop</span> to pause.\r\n              </li>\r\n              <li>\r\n                <span>Clear</span> wipes the grid clean.\r\n              </li>\r\n              <li>(Optional): Resize the grid</li>\r\n            </ul>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"game-rules\">\r\n          <button onClick={() => setOpenLogic(!openLogic)}>Game Logic</button>\r\n\r\n          {openLogic && (\r\n            <ol>\r\n              <li>\r\n                Any live cell with fewer than two live neighbours dies, as if by\r\n                underpopulation.\r\n              </li>\r\n              <li>\r\n                Any live cell with two or three live neighbours lives on to the\r\n                next generation.\r\n              </li>\r\n              <li>\r\n                Any live cell with more than three live neighbours dies, as if\r\n                by overpopulation.\r\n              </li>\r\n              <li>\r\n                Any dead cell with exactly three live neighbours becomes a live\r\n                cell, as if by reproduction.\r\n              </li>\r\n            </ol>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"grid\"\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\r\n          gridTemplateRows: `repeat(${numRows}, 20px)`,\r\n        }}\r\n      >\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, k) => (\r\n            <div\r\n              onClick={() => {\r\n                const newGrid = produce(grid, (gridCopy) => {\r\n                  gridCopy[i][k] = gridCopy[i][k] ? 0 : 1;\r\n                });\r\n                setGrid(newGrid);\r\n              }}\r\n              key={`${i}-${k}`}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                width: 20,\r\n                height: 20,\r\n                backgroundColor: grid[i][k] ? \"limegreen\" : \"black\",\r\n                border: \"solid 1px #999\",\r\n              }}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}